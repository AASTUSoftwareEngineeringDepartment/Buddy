from fastapi import APIRouter, Depends, HTTPException
from app.services.story_generation.story_service import StoryService
from app.models.story.story import StoryRequest, StoryResponse, VocabularyResponse
from app.api.v1.dependencies.auth import get_current_user
from app.models.enums import UserRole
from typing import List

router = APIRouter(prefix="/stories", tags=["stories"])

@router.post("/generate", response_model=StoryResponse)
async def generate_story(
    request: StoryRequest,
    current_user: tuple[str, UserRole] = Depends(get_current_user)
):
    try:
        user_id, user_role = current_user
        story_service = StoryService()
        # If the user is a child, pass their ID to store the story
        child_id = user_id if user_role == UserRole.CHILD else None
        story = await story_service.generate_personalized_story(request, child_id)
        return story
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Failed to generate story: {str(e)}"
        )

@router.get("/my-stories", response_model=list[StoryResponse])
async def get_my_stories(
    current_user: tuple[str, UserRole] = Depends(get_current_user)
):
    try:
        user_id, user_role = current_user
        if user_role != UserRole.CHILD:
            raise HTTPException(
                status_code=403,
                detail="Only children can access their stories"
            )
        story_service = StoryService()
        stories = await story_service.story_repository.get_child_stories(user_id)
        # Map Story objects to StoryResponse objects
        return [
            StoryResponse(
                title=story.title,
                story_body=story.content,  # Map content to story_body
                image_url=story.image_url
            )
            for story in stories
        ]
    except HTTPException as he:
        raise he
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Failed to retrieve stories: {str(e)}"
        )

@router.get("/my-vocabulary", response_model=List[VocabularyResponse])
async def get_my_vocabulary(
    current_user: tuple[str, UserRole] = Depends(get_current_user)
):
    """
    Get all vocabulary words from stories generated by the current child.
    Only accessible by children.
    """
    try:
        user_id, user_role = current_user
        if user_role != UserRole.CHILD:
            raise HTTPException(
                status_code=403,
                detail="Only children can access their vocabulary words"
            )
            
        story_service = StoryService()
        vocabulary_words = await story_service.story_repository.get_child_vocabulary_words(user_id)
        
        return [
            VocabularyResponse(
                word=word["word"],
                synonym=word["synonym"],
                related_words=word["related_words"],
                story_title=word["story_title"],
                created_at=word["created_at"]
            )
            for word in vocabulary_words
        ]
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"Failed to retrieve vocabulary words: {str(e)}"
        ) 