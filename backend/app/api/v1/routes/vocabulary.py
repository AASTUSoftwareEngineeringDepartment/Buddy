from fastapi import APIRouter, Depends, HTTPException, Query
from app.models.story.story import VocabularyResponse, VocabularyWord
from app.services.vocabulary.vocabulary_service import VocabularyService
from app.api.v1.dependencies.auth import get_current_user, require_role
from app.models.enums import UserRole
from typing import List
import logging
from app.db.mongo import MongoDB

router = APIRouter(prefix="/vocabulary", tags=["vocabulary"])
logger = logging.getLogger(__name__)

def get_vocabulary_service() -> VocabularyService:
    """Dependency to get an instance of VocabularyService."""
    return VocabularyService()

@router.get("/my-vocabulary", response_model=List[VocabularyResponse])
async def get_my_vocabulary(
    current_user: tuple[str, UserRole] = Depends(get_current_user),
    vocabulary_service: VocabularyService = Depends(get_vocabulary_service)
):
    """
    Get all vocabulary words from stories generated by the current child.
    Only accessible by children.
    """
    try:
        user_id, user_role = current_user
        if user_role != UserRole.CHILD:
            raise HTTPException(
                status_code=403,
                detail="Only children can access their vocabulary words"
            )
            
        vocabulary_words = await vocabulary_service.get_child_vocabulary_words(user_id)
        
        return [
            VocabularyResponse(
                word=word["word"],
                synonym=word["synonym"],
                meaning=word["meaning"],
                related_words=word["related_words"],
                story_title=word["story_title"],
                created_at=word["created_at"]
            )
            for word in vocabulary_words
        ]
    except Exception as e:
        logger.error(f"Failed to retrieve vocabulary words: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to retrieve vocabulary words: {str(e)}"
        )

@router.get("/story/{story_id}/vocabulary", response_model=List[VocabularyResponse])
async def get_story_vocabulary(
    story_id: str,
    current_user: tuple[str, UserRole] = Depends(get_current_user),
    vocabulary_service: VocabularyService = Depends(get_vocabulary_service)
):
    """
    Get all vocabulary words for a specific story.
    Accessible by both children and parents.
    """
    try:
        user_id, user_role = current_user
        
        # Get vocabulary words for the story
        vocabulary_words = await vocabulary_service.get_vocabulary_words_by_story(story_id)
        
        # If user is a child, verify the story belongs to them
        if user_role == UserRole.CHILD:
            if not any(word.child_id == user_id for word in vocabulary_words):
                raise HTTPException(
                    status_code=403,
                    detail="Not authorized to access this story's vocabulary"
                )
        # If user is a parent, verify they have access to the child's story
        elif user_role == UserRole.PARENT:
            db = MongoDB.get_db()
            # Get the child_id from the first vocabulary word
            if vocabulary_words:
                child_id = vocabulary_words[0].child_id
                # Verify parent-child relationship
                child = await db["children"].find_one({
                    "child_id": child_id,
                    "parent_id": user_id
                })
                if not child:
                    raise HTTPException(
                        status_code=403,
                        detail="Not authorized to access this story's vocabulary"
                    )
        
        return [
            VocabularyResponse(
                word=word.word,
                synonym=word.synonym,
                meaning=word.meaning,
                related_words=word.related_words,
                story_title=word.story_title,
                created_at=word.created_at
            )
            for word in vocabulary_words
        ]
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Failed to retrieve story vocabulary: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to retrieve story vocabulary: {str(e)}"
        )

@router.get("/parent/child/{child_id}/vocabulary", response_model=List[VocabularyResponse])
async def get_child_vocabulary_by_parent(
    child_id: str,
    parent_id: str = Depends(require_role(UserRole.PARENT)),
    vocabulary_service: VocabularyService = Depends(get_vocabulary_service)
):
    """
    Get all vocabulary words for a specific child, verifying parent relationship.
    Only accessible by parents.
    """
    try:
        # Get vocabulary words for the child
        vocabulary_words = await vocabulary_service.get_child_vocabulary_words(child_id)
        
        return [
            VocabularyResponse(
                word=word["word"],
                synonym=word["synonym"],
                meaning=word["meaning"],
                related_words=word["related_words"],
                story_title=word["story_title"],
                created_at=word["created_at"]
            )
            for word in vocabulary_words
        ]
    except Exception as e:
        logger.error(f"Failed to retrieve child vocabulary: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Failed to retrieve child vocabulary: {str(e)}"
        ) 